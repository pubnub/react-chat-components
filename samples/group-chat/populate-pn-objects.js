/* eslint-disable */
const PubNub = require("pubnub");
const { SingleBar, Presets } = require("cli-progress");
const prompts = require("prompts");
const yargs = require("yargs/yargs");
const { hideBin } = require("yargs/helpers");
const sampleSize = require("lodash.sampleSize");

const users = require("../../data/users.json");
const channels = require("../../data/channels-work.json");

require("dotenv").config({ path: "../.env" });
/* eslint-enable */

/**
 * This version of the population script adds:
 * 30 users
 * 10 work related channels
 * 4 channel memberships for each user (120)
 * 0 direct chat memberships
 */

const keyPrompt = `
  \u{1b}[1m*** A PubNub account is required. ***\u{1b}[0m
  Visit the PubNub dashboard to create an account or login:
      https://dashboard.pubnub.com/
  Create a new app or locate your app in the dashboard.
  Enable the Presence, Files, Objects, and Storage features using a region of your choosing.
  For Objects, ensure  the following are enabled:
  - User Metadata Events
  - Channel Metadata Events
  - Membership Events
  Copy and paste your publish key and subscribe key into .env before continuing.
`;

let errorCount = 0;
let timeouts = 0;

const sleep = async (ms) => {
  return new Promise((resolve) => {
    setTimeout(resolve, ms);
  });
};

const getKeys = async () => {
  return {
    publishKey: process.env.REACT_APP_PUB_KEY,
    subscribeKey: process.env.REACT_APP_SUB_KEY,
  };
};

const batch = (list, size) => {
  return list.reduce(
    (batched, item, index, items) => {
      batched.current.push(item);
      if ((index > 0 && index % size === 0) || index === items.length - 1) {
        batched.complete.push(batched.current);
        batched.current = [];
      }
      return batched;
    },
    { complete: [], current: [] }
  ).complete;
};

const doBatches = async (batches, f, interval) => {
  for (const batch of batches) {
    await Promise.all(batch.map(f));
    await sleep(interval);
  }
};

const handlePubNubError = (e) => {
  errorCount++;
  if (e.status.operation) {
    if (e.status.category === "PNAccessDeniedCategory") {
      console.error(
        `\n\nObjects are not enabled on your keys.
        Please enable objects in your PubNub dashboard to proceed.
        It may take a few minutes for this change to be applied.`
      );
      process.exit(1);
    }
    if (e.status.category === "PNTimeoutCategory") {
      timeouts++;
    }
    console.error(
      `${e.name}(${e.status.operation}): ${e.status.category}.${e.status.errorData.code}`
    );
  } else {
    console.error(`${e.status.type}: ${e.status.message}`);
  }
};

// remove fields generated by objects
const clean = ({ eTag, updated, ...metadata }) => metadata;

const initializeUUID = (pubnub, status) => async ({ id: uuid, ...data }) => {
  try {
    const response = await pubnub.objects.setUUIDMetadata({
      uuid,
      data: clean(data),
    });
    if (response.status === 200) {
      status.increment();
    } else {
      errorCount++;
      console.error(`Unknown error initializing data for ${uuid}.`);
    }
  } catch (e) {
    handlePubNubError(e);
  }
};

const initializeChannel = (pubnub, status) => async ({ id: channel, ...data }) => {
  try {
    const response = await pubnub.objects.setChannelMetadata({
      channel,
      data: clean(data),
    });
    if (response.status === 200) {
      status.increment();
    } else {
      errorCount++;
      console.error(`Unknown error initializing data for ${channel}.`);
    }
  } catch (e) {
    handlePubNubError(e);
  }
};

const initializeMembership = (pubnub, status) => async ({ uuid, channels }) => {
  try {
    const response = await pubnub.objects.setMemberships({
      uuid,
      channels,
    });
    if (response.status === 200) {
      status.increment(channels.length);
    } else {
      errorCount++;
      console.error(`Unknown error initializing memberships for ${uuid}.`);
    }
  } catch (e) {
    handlePubNubError(e);
  }
};

const main = async () => {
  // command line arguments
  const argv = yargs(hideBin(process.argv))
    .number("batch-size")
    .alias("batch-size", "b")
    .describe("batch-size", "Number of concurrent requests")
    .default("batch-size", 30)
    .number("request-interval")
    .alias("request-interval", "i")
    .describe("request-interval", "Delay between batches of requests in ms")
    .default("request-interval", 0).argv;

  const { batchSize, requestInterval } = argv;

  let keys = await getKeys();
  while (!(keys.publishKey.startsWith("pub-") && keys.subscribeKey.startsWith("sub-"))) {
    // wait for the user to update the key file
    console.log(keyPrompt);
    const { answer } = await prompts({
      type: "confirm",
      name: "answer",
      message: "Does .env contain PubNub keys?",
      initial: true,
    });
    if (!answer) {
      console.log(`Please add your publish and subscribe key and re-run the script.`);
      process.exit(0);
    }
    keys = await getKeys();
  }

  const pubnub = new PubNub({
    ...keys,
  });

  const membershipsPerUser = 4;
  const totalUUIDs = users.length;
  const totalChannels = channels.length;
  const totalMemberships = totalUUIDs * membershipsPerUser;

  const userMemberships = users
    .map(({ id: uuid }) =>
      batch(sampleSize(channels, membershipsPerUser), batchSize).map((channel) => ({
        uuid,
        channels: channel,
      }))
    )
    .flat();

  // create users
  const uuidCreationStatus = new SingleBar({}, Presets.shades_classic);
  console.log("\nInitializing UUID Metadata:");
  uuidCreationStatus.start(totalUUIDs, 0);
  await doBatches(
    batch(users, batchSize),
    initializeUUID(pubnub, uuidCreationStatus),
    requestInterval
  );
  await sleep(100);
  console.log("\n");

  // create channels
  const channelCreationStatus = new SingleBar({}, Presets.shades_classic);
  console.log("\nInitializing Channel Metadata:");
  channelCreationStatus.start(totalChannels, 0);
  await doBatches(
    // batch(channels.concat(channelsDirect), batchSize),
    batch(channels, batchSize),
    initializeChannel(pubnub, channelCreationStatus),
    requestInterval
  );
  await sleep(100);
  console.log("\n");

  // create memberships
  const membershipCreationStatus = new SingleBar({}, Presets.shades_classic);
  console.log("\nInitializing Memberships:");
  membershipCreationStatus.start(totalMemberships, 0);
  await sleep(1000);
  await doBatches(
    // batch(userMemberships.concat(membershipsDirect), Math.ceil(batchSize / 3)),
    batch(userMemberships, Math.ceil(batchSize / 3)),
    initializeMembership(pubnub, membershipCreationStatus),
    requestInterval
  );
  await sleep(100);
  console.log("\n");

  if (timeouts > 0) {
    console.log(
      `To prevent timeouts try running again with a smaller batch size and larger interval:
      node populate-pn-objects.js --batch-size ${Math.ceil(batchSize / 2)} --request-interval ${
        requestInterval + 100
      }`
    );
  }

  if (errorCount === 0) {
    process.exit(0);
  } else {
    console.warn(
      `${errorCount} error${
        errorCount === 1 ? "" : "s"
      } initializing data. \n Please "node populate-pn-objects.js" again.`
    );
    process.exit(1);
  }
};

main();
