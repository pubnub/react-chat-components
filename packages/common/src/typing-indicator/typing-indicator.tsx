import { useState, useEffect, useCallback, useRef } from "react";
import { usePubNub } from "pubnub-react";
import { isEqual } from "lodash";
import { useAtom } from "jotai";
import {
  CurrentChannelTypingIndicatorAtom,
  ThemeAtom,
  TypingIndicatorTimeoutAtom,
  UsersMetaAtom,
} from "../state-atoms";

export interface CommonTypingIndicatorProps {
  /** Option to put a typing indicator inside the MessageList component to render indicators as messages. */
  showAsMessage?: boolean;
}

/** Subscribes to events generated by MessageInput to display information about users that are
 * currently typing messages.
 *
 * It can be displayed as a text denoting the user's name, or in a form similar to
 * a message that can be renderer inside MessageList.
 */
export const useTypingIndicatorCore = (props: CommonTypingIndicatorProps) => {
  const pubnub = usePubNub();

  const [theme] = useAtom(ThemeAtom);
  const [users] = useAtom(UsersMetaAtom);
  const [typingIndicators] = useAtom(CurrentChannelTypingIndicatorAtom);
  const [typingIndicatorTimeout] = useAtom(TypingIndicatorTimeoutAtom);
  const [activeUUIDs, setActiveUUIDs] = useState([]);
  const typingIndicatorsRef = useRef(typingIndicators);

  if (!isEqual(typingIndicatorsRef.current, typingIndicators)) {
    typingIndicatorsRef.current = typingIndicators;
  }

  const calculateActiveUUIDs = useCallback(() => {
    const currentActiveUUIDs = Object.keys(typingIndicators).filter(
      (id) => Date.now() - parseInt(typingIndicators[id]) / 10000 < typingIndicatorTimeout * 1000
    );
    const currentActiveUUIDsWoCurrent = currentActiveUUIDs.filter((id) => id !== pubnub.getUUID());
    setActiveUUIDs(currentActiveUUIDsWoCurrent);
  }, [typingIndicatorsRef.current]);

  const getIndicationString = () => {
    let indicateStr = "";
    if (activeUUIDs.length > 1) indicateStr = "Multiple users are typing...";
    if (activeUUIDs.length == 1) {
      const user = users.find((u) => u.id === activeUUIDs[0]);
      indicateStr = `${user?.name || "Unknown User"} is typing...`;
    }
    return indicateStr;
  };

  useEffect(() => {
    calculateActiveUUIDs();
    const interval = setInterval(calculateActiveUUIDs, 1000);
    return () => clearInterval(interval);
  }, [calculateActiveUUIDs]);

  return {
    activeUUIDs,
    getIndicationString,
    theme,
    users,
  };
};
